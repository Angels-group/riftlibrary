precision mediump float;
uniform vec3 uLightPos;
uniform vec4 lightColor;

uniform samplerCube sTexture;

// material
uniform vec4 matAmbient;
uniform vec4 matDiffuse;
uniform vec4 matSpecular;
uniform float matShininess;

varying vec3 vEyeNormal;
varying vec3 vNormal;
varying vec3 vPosition;

void main() {
	float distance = length(uLightPos - vPosition);
	vec3 lightVec = normalize(uLightPos - vPosition);
	float diffuse = max(dot(vEyeNormal, lightVec), 0.3);
	
	// attenuation
	diffuse = diffuse * (1.0 / (1.0 + (0.000005 * distance * distance)));

	gl_FragColor = textureCube(sTexture, vNormal) * diffuse;
}